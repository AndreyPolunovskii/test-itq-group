{"version":3,"sources":["components/Draw_graphs.module.css","components/Draw_graphs.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","base_url","JSON","stringify","fconfig","replace","DrawGraphs","props","state","isFetching","error","data","start_date","end_date","city_name","style","height_graph","onChange","bind","handleClick","UpdateState","PutState","getOption","response","Err","Error","this","setState","length","event","axios","get","params","city","headers","then","checkData","console","log","catch","e","alert","message","name","target","preventDefault","value","type_data","title","type_unit","legend","text","tooltip","dataset","dimensions","source","map","item","date","Date","dt","xAxis","type","yAxis","series","smooth","className","cs","page__wrapper","page__title_wrapper","page__main_title_wrapper","page__form_data_wrapper","page__title_form_data_wrapper","Form","Row","Group","as","Col","controlId","row_three_item","Label","bsPrefix","title_field","Control","defaultValue","required","xs","Button","variant","button_upload","onClick","renderTitle","page__graph_data_wrapper","ref","height","option","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88fc7013.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page__wrapper\":\"Draw_graphs_page__wrapper__31PQq\",\"page__title_form_data_wrapper\":\"Draw_graphs_page__title_form_data_wrapper__RXHPq\",\"page__form_data_wrapper\":\"Draw_graphs_page__form_data_wrapper__2ZLka\",\"page__graph_data_wrapper\":\"Draw_graphs_page__graph_data_wrapper__1nuG6\",\"page__main_title_wrapper\":\"Draw_graphs_page__main_title_wrapper__2su8c\",\"page__title_wrapper\":\"Draw_graphs_page__title_wrapper__3PyKH\"};","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport axios from 'axios';\nimport cs from './Draw_graphs.module.css';\nimport fconfig from \"../fconfig.json\";\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport ReactEcharts from 'echarts-for-react';\n\nvar base_url = JSON.stringify(fconfig[\"api\"][\"root\"]).replace(/['\"]+/g, '')\n\n\nclass DrawGraphs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isFetching: true,\n      error: null,\n      data : null,\n      start_date : \"2020-01-13\",\n      end_date : \"2020-01-14\",\n      city_name : \"Moscow\",\n      style : {\n        height_graph : \"400px\"\n      }\n    }\n\n    this.onChange = this.onChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.UpdateState = this.UpdateState.bind(this);\n    this.PutState = this.PutState.bind(this);\n    this.getOption = this.getOption.bind(this);\n  }\n  ///////////////////////\n  checkData(response) {\n\n    //если какие то ошибки (надо их выводить на экран)\n    if ('error' in response.data)\n    {\n      let Err = new Error(response.data['error']);\n      this.setState({\n        error : Err\n      })\n      throw Err;\n    }\n\n    //если пустой датасет\n    if (response.data != null)\n    if (response.data['data'].length === 0)\n    {\n      let Err = new Error(\"нет данных\");\n      this.setState({\n        error: Err\n      })\n      throw Err;\n    }\n  }\n  ///////////////////////\n  PutState(event) {\n\n    axios.get(base_url+'/api/v1.0/data/upload',{\n      params: {\n        city : this.state.city_name,\n        start_date : this.state.start_date,\n        end_date : this.state.end_date\n      },\n      headers: {\n        // Перечисляем разрешённые методы\n        \"Access-Control-Allow-Methods\": \"GET\"\n      }\n    })\n    .then(\n      (response) => {\n        this.checkData(response);\n        console.log(response) // выводим в консоль получаемые обьекты\n        this.setState({\n          data: response.data\n        });\n      }\n    )\n    .catch(e => {\n      console.log(e)\n      this.setState({\n        error: e\n      });\n      alert(this.state.error.message)\n    }\n  )\n\n}\n\n///////////////////////\nUpdateState(event) {\n\n  axios.get(base_url+'/api/v1.0/data/get',{\n    params: {\n      city : this.state.city_name,\n      start_date : this.state.start_date,\n      end_date : this.state.end_date\n    },\n    headers: {\n      // Перечисляем разрешённые методы\n      \"Access-Control-Allow-Methods\": \"GET\"\n    }\n  })\n  .then(\n    (response) => {\n      this.checkData(response);\n      console.log(response) // выводим в консоль получаемые обьекты\n      this.setState({\n        data: response.data\n      });\n    }\n  )\n  .catch(e => {\n    console.log(e)\n    this.setState({\n      error: e\n    });\n    alert(this.state.error.message)\n  }\n)\n\n}\n/////////////////////////////////////\n\nhandleClick(event) {\n  const name = event.target.name;\n\n\n  event.preventDefault();\n\n  if (name === \"get\")\n  this.UpdateState(event)\n\n  if (name === \"upload\")\n  this.PutState(event)\n\n}\n//////////////////////////////////////\nonChange(e) {\n  const name = e.target.name;\n  const value = e.target.value;\n\n  this.setState({\n    [name]: value\n  })\n\n}\n\n//////////////////////\ncomponentDidMount(event) {\n\n  this.UpdateState(event)\n\n}\n/////////////////////\n//функция рисования графика\ngetOption(type_data) {\n\n  let title = \"\",type_unit = \"\";\n  if (type_data === \"temp\")\n  {\n    title = \"Температура\"\n    type_unit =\"[C]\"\n  }\n\n\n  if (type_data === \"pres\")\n  {\n    title = \"Давление\"\n    type_unit =\"[mb]\"\n  }\n\n\n\n  if (type_data === \"rh\")\n  {\n    title = \"влажность\"\n    type_unit =\"[%]\"\n  }\n\n\n  //ждем пока данные полностью загрузятся и тогда отрисовываем график\n  if (this.state.data !== null)\n  {\n\n    let option = {\n      legend: {},\n      title: {text:type_unit},\n      tooltip: {},\n      dataset: {\n        dimensions: ['date',type_data],\n        source: this.state.data['data'].map(\n          (item) => (\n            {\n              date: new Date(item.dt),\n              [type_data]: item[type_data]\n            }\n          )\n        )\n      },\n      xAxis: {type: 'time'},\n      yAxis: {},\n      series: [\n        {\n          name: title,\n          type: 'line',\n          smooth: 0.5  //включаем сглаживание\n        },\n      ]\n    };\n    return option;\n  }\n  else\n  {\n    let option = {};\n    return option;\n  }\n\n}\n////////////////////\nrenderTitle(data) {\n  if (this.state.data !== null)\n  {\n    return( <p><b>Выбранный город - {this.state.data['data'][0]['city_name']} ({this.state.data['data'][0]['country_code']})</b></p> );\n  }\n  else {\n    return(<p></p>);\n  }\n\n}\n\n\nrender() {\n  let {style,data} = this.state;\n    return (\n      <div>\n        <div className={cs.page__wrapper}>\n          <div className={`${cs.page__title_wrapper} ${cs.page__main_title_wrapper}`}>\n            <b>Погодные данные</b>\n            <hr></hr>\n          </div>\n          <div className={cs.page__form_data_wrapper}>\n            <p className={cs.page__title_form_data_wrapper}><b>Введите основные параметры:</b></p>\n            <Form>\n              <Form.Row>\n                <Form.Group  as={Col} controlId=\"formHorizontal1\">\n                  <div className={cs.row_three_item}>\n                    <Form.Label bsPrefix={cs.title_field}><b>Начальная дата:</b></Form.Label>\n                    <Form.Control name=\"start_date\" defaultValue=\"2020-01-13\" type=\"date\" required=\"required\"  onChange={this.onChange} />\n                  </div>\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formHorizontal2\">\n                  <div className={cs.row_three_item}>\n                    <Form.Label bsPrefix={cs.title_field}><b>Конечная дата:</b></Form.Label>\n                    <Form.Control name=\"end_date\" defaultValue=\"2020-01-14\" type=\"date\" required=\"required\" onChange={this.onChange} />\n                  </div>\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formHorizontal2\">\n                  <div className={cs.row_three_item}>\n                    <Form.Label bsPrefix={cs.title_field}><b>Название города (на английском):</b></Form.Label>\n                    <Form.Control name=\"city_name\" defaultValue=\"Moscow\" type=\"text\" required=\"required\" onChange={this.onChange} />\n                  </div>\n                </Form.Group>\n              </Form.Row>\n              <p><i>Внешний ресурс https://www.weatherbit.io/ ограничивает количество запрашивемых данных с разным интервалом времени до одного раза в сутки.</i>\n              <br></br><i>Соотвественно в сутки можно загрузить с внешнего ресурса только один интервал времени для любого города.</i>\n              <br></br><i>Максимальное количество запросов к внешнему ресурсу ограничивается до 500 в сутки.</i></p>\n              <Row>\n                <Col xs={4}>\n                    <Button type=\"submit\" variant=\"warning\" name=\"upload\" className={cs.button_upload}  onClick={this.handleClick}>\n                      Загрузить данные с внешнего ресурса\n                    </Button>\n                </Col>\n                <Col xs={4}>\n                    <Button type=\"submit\" variant=\"danger\" name=\"get\" className={cs.button_upload}  onClick={this.handleClick}>\n                      Загрузить данные из локальной базы\n                    </Button>\n                </Col>\n              </Row>\n            </Form>\n            <hr></hr>\n          </div>\n\n          <div className={cs.page__title_wrapper}>\n            {this.renderTitle(data)}\n          </div>\n          <div className={cs.page__graph_data_wrapper}>\n            <Row>\n              <Col>\n                <ReactEcharts ref='echartsInstance'\n                  style={{ height: style.height_graph}}\n                  option={this.getOption('temp')} />\n              </Col>\n              <Col>\n                <ReactEcharts ref='echartsInstance'\n                  style={{ height: style.height_graph}}\n                  option={this.getOption('pres')} />\n              </Col>\n              <Col>\n                <ReactEcharts ref='echartsInstance'\n                  style={{ height: style.height_graph}}\n                  option={this.getOption('rh')} />\n              </Col>\n            </Row>\n          </div>\n        </div>\n      </div>\n    )\n}\n\n}\n\n\nexport default DrawGraphs;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import logo from './logo.svg';\nimport './App.css';\n\n\n//import Error from \"./components/elements/Error\";\nimport DrawGraphs from \"./components/Draw_graphs\";\n\n\nconst App = () => {\n  return (\n      <div>\n        <DrawGraphs/>\n      </div>\n  )\n}\n\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}